#!/usr/bin/python3

import datetime
import os
import subprocess

IGNORES = (
    'ibm-bluemix-mosquitto',
)


def _pull(image):
    print('= Pulling latest version of %s' % image)
    subprocess.check_call(['docker', 'pull', image], stdout=subprocess.DEVNULL)


def _find_base_image(docker_file):
    with open(docker_file) as f:
        # We have to read in reverse to deal with multi-stage containers
        for line in reversed(f.readlines()):
            if line.startswith('FROM'):
                return line[4:].strip()
    raise ValueError('Unable to find "FROM" spec in %s' % docker_file)


def _docker_inspect(image):
    fmt = '{{(index .RepoDigests 0)}}\n{{(index .RootFS.Layers 0)}}'
    out = subprocess.check_output(['docker', 'inspect', '-f', fmt, image])
    return out.strip().decode().splitlines()


def _inspect(docker_file, image):
    print('= Looking for package updates to %s' % image)
    print('  pulling in latest version of base image')
    base_image = _find_base_image(docker_file)
    _pull(base_image)
    base_sha, base_layer = _docker_inspect(base_image)
    _, image_base = _docker_inspect(image)
    if image_base != base_layer:
        return ['Alpine base image changed to: ' + base_sha]

    return []


def main(reg_base):
    images = [x for x in os.listdir()
              if os.path.isdir(x) and x != '.git' and x not in IGNORES]
    print('= Looking at images: %s' % ', '.join(images))

    msg = ''
    for x in images:
        img = reg_base + '/' + x
        _pull(img)
        updates = _inspect(os.path.join(x, 'Dockerfile'), img)
        if updates:
            msg += '\n## %s' % x
            msg += '\n * ' + '\n * '.join(updates) + '\n'

    if msg:
        if os.environ.get('COMMIT'):
            print('Creating empty git commit with changes noted')
            day = datetime.datetime.utcnow().strftime('%Y-%m-%d')
            msg = 'Alpine Base Updates: %s\n\n' % day + msg
            subprocess.check_call(
                ['git', 'commit', '--signoff', '--allow-empty', '-m', msg])
        else:
            print(msg)

    else:
        print('No updates found')


if __name__ == '__main__':
    reg_base = os.environ.get('REGISTRY_BASE', 'hub.foundries.io')
    main(reg_base)
