#!/usr/bin/python3

import datetime
import os
import subprocess

IGNORES = (
    'ibm-bluemix-mosquitto',
)


def _pull(image):
    print('= Pulling latest version of %s' % image)
    subprocess.check_call(['docker', 'pull', image], stdout=subprocess.DEVNULL)


def _find_base_image(docker_file):
    with open(docker_file) as f:
        # We have to read in reverse to deal with multi-stage containers
        for line in reversed(f.readlines()):
            if line.startswith('FROM'):
                return line[4:].strip()
    raise ValueError('Unable to find "FROM" spec in %s' % docker_file)


def _docker_find_apk_add(docker_file):
    # this is a hack that hurts, but its better than nothing. It
    # tries to guess what APK packages a Dockerfile installs by finding
    # the last "apk add" command used in a Dockerfile. By the convention
    # we've used building our containers, this works fairly well
    with open(docker_file) as f:
        # We have to read in reverse to deal with multi-stage containers
        for line in reversed(f.readlines()):
            if line.startswith('RUN apk add'):
                cmd = line[4:].strip()
                if cmd[-1] == '\\':  # Dockerfile multi-line
                    cmd = cmd[:-1].strip()
                if cmd[-2:] == '&&':  # probably Dockerfile multi-line command
                    cmd = cmd[:-2]
                return cmd


def _apk_versions(image, extra_cmd=None):
    cmd = 'echo EIOIO_VERSIONS && cat /lib/apk/db/installed'
    if extra_cmd:
        cmd = extra_cmd + ' && ' + cmd
    args = [
        'docker', 'run', '--rm',
        '--entrypoint=',
        image,
        '/bin/sh', '-c', cmd
    ]

    out = subprocess.check_output(args).decode()

    in_versions = False
    cur_pkg = None
    packages = {}
    for line in out.splitlines():
        if in_versions:
            if line.startswith('P:'):
                cur_pkg = line[2:].strip()
            elif line.startswith('V:'):
                assert cur_pkg is not None
                packages[cur_pkg] = line[2:].strip()
                cur_pkg = None
        if line == 'EIOIO_VERSIONS':
            in_versions = True
    return packages


def _docker_inspect(image):
    fmt = '{{(index .RepoDigests 0)}}\n{{(index .RootFS.Layers 0)}}'
    out = subprocess.check_output(['docker', 'inspect', '-f', fmt, image])
    return out.strip().decode().splitlines()


def _inspect(docker_file, image):
    print('= Looking for package updates to %s' % image)
    print('  pulling in latest version of base image')

    changes = []
    base_image = _find_base_image(docker_file)
    _pull(base_image)
    base_sha, base_layer = _docker_inspect(base_image)
    _, image_base = _docker_inspect(image)
    if image_base != base_layer:
        changes.append('Alpine base image changed to: ' + base_sha)

    print('  probing package versions current image')
    cur_versions = _apk_versions(image)
    print('  detecting package versions if a new image were built')
    new_versions = _apk_versions(base_image, _docker_find_apk_add(docker_file))

    cur_names = set(cur_versions.keys())
    new_names = set(new_versions.keys())

    for removed in cur_names - new_names:
        changes.append('Removed ' + removed)
    for added in new_names - cur_names:
        changes.append('Added ' + added)
    for pkg in cur_names & new_names:
        if cur_versions[pkg] != new_versions[pkg]:
            changes.append('Changed %s %s -> %s' % (
                pkg, cur_versions[pkg], new_versions[pkg]))
    return changes


def main(reg_base):
    images = [x for x in os.listdir()
              if os.path.isdir(x) and x != '.git' and x not in IGNORES]
    print('= Looking at images: %s' % ', '.join(images))

    msg = ''
    for x in images:
        img = reg_base + '/' + x
        _pull(img)
        updates = _inspect(os.path.join(x, 'Dockerfile'), img)
        if updates:
            msg += '\n## %s' % x
            msg += '\n * ' + '\n * '.join(updates) + '\n'

    if msg:
        if os.environ.get('COMMIT'):
            print('Creating empty git commit with changes noted')
            msg = "NOTE: These deltas can change between the commit and the container's build step\n" + msg # NOQA
            day = datetime.datetime.utcnow().strftime('%Y-%m-%d')
            msg = 'Alpine Base Updates: %s\n\n' % day + msg
            subprocess.check_call(
                ['git', 'commit', '--signoff', '--allow-empty', '-m', msg])
        else:
            print(msg)

    else:
        print('No updates found')


if __name__ == '__main__':
    reg_base = os.environ.get('REGISTRY_BASE', 'hub.foundries.io')
    main(reg_base)
